<?php

/**
 * Do not edit this file: it is auto-generated from the fit-parser-generate-profile command.
 */

declare(strict_types=1);

namespace FitParser\Records\Generated;

use FitParser\Records\Generated\Record\AbsolutePressure;
use FitParser\Records\Generated\Record\AccumulatedPower;
use FitParser\Records\Generated\Record\ActivityType;
use FitParser\Records\Generated\Record\AirTimeRemaining;
use FitParser\Records\Generated\Record\Altitude;
use FitParser\Records\Generated\Record\AscentRate;
use FitParser\Records\Generated\Record\BallSpeed;
use FitParser\Records\Generated\Record\BatterySoc;
use FitParser\Records\Generated\Record\Cadence;
use FitParser\Records\Generated\Record\Cadence256;
use FitParser\Records\Generated\Record\Calories;
use FitParser\Records\Generated\Record\CnsLoad;
use FitParser\Records\Generated\Record\CombinedPedalSmoothness;
use FitParser\Records\Generated\Record\CompressedAccumulatedPower;
use FitParser\Records\Generated\Record\CompressedSpeedDistance;
use FitParser\Records\Generated\Record\CoreTemperature;
use FitParser\Records\Generated\Record\CurrentStress;
use FitParser\Records\Generated\Record\CycleLength;
use FitParser\Records\Generated\Record\CycleLength16;
use FitParser\Records\Generated\Record\Cycles;
use FitParser\Records\Generated\Record\Depth;
use FitParser\Records\Generated\Record\DeviceIndex;
use FitParser\Records\Generated\Record\Distance;
use FitParser\Records\Generated\Record\EbikeAssistLevelPercent;
use FitParser\Records\Generated\Record\EbikeAssistMode;
use FitParser\Records\Generated\Record\EbikeBatteryLevel;
use FitParser\Records\Generated\Record\EbikeTravelRange;
use FitParser\Records\Generated\Record\EnhancedAltitude;
use FitParser\Records\Generated\Record\EnhancedRespirationRate;
use FitParser\Records\Generated\Record\EnhancedSpeed;
use FitParser\Records\Generated\Record\Flow;
use FitParser\Records\Generated\Record\FractionalCadence;
use FitParser\Records\Generated\Record\GpsAccuracy;
use FitParser\Records\Generated\Record\Grade;
use FitParser\Records\Generated\Record\Grit;
use FitParser\Records\Generated\Record\HeartRate;
use FitParser\Records\Generated\Record\LeftPco;
use FitParser\Records\Generated\Record\LeftPedalSmoothness;
use FitParser\Records\Generated\Record\LeftPowerPhase;
use FitParser\Records\Generated\Record\LeftPowerPhasePeak;
use FitParser\Records\Generated\Record\LeftRightBalance;
use FitParser\Records\Generated\Record\LeftTorqueEffectiveness;
use FitParser\Records\Generated\Record\MotorPower;
use FitParser\Records\Generated\Record\N2Load;
use FitParser\Records\Generated\Record\NdlTime;
use FitParser\Records\Generated\Record\NextStopDepth;
use FitParser\Records\Generated\Record\NextStopTime;
use FitParser\Records\Generated\Record\Po2;
use FitParser\Records\Generated\Record\PositionLat;
use FitParser\Records\Generated\Record\PositionLong;
use FitParser\Records\Generated\Record\Power;
use FitParser\Records\Generated\Record\PressureSac;
use FitParser\Records\Generated\Record\Resistance;
use FitParser\Records\Generated\Record\RespirationRate;
use FitParser\Records\Generated\Record\RightPco;
use FitParser\Records\Generated\Record\RightPedalSmoothness;
use FitParser\Records\Generated\Record\RightPowerPhase;
use FitParser\Records\Generated\Record\RightPowerPhasePeak;
use FitParser\Records\Generated\Record\RightTorqueEffectiveness;
use FitParser\Records\Generated\Record\Rmv;
use FitParser\Records\Generated\Record\SaturatedHemoglobinPercent;
use FitParser\Records\Generated\Record\SaturatedHemoglobinPercentMax;
use FitParser\Records\Generated\Record\SaturatedHemoglobinPercentMin;
use FitParser\Records\Generated\Record\Speed;
use FitParser\Records\Generated\Record\Speed1s;
use FitParser\Records\Generated\Record\StanceTime;
use FitParser\Records\Generated\Record\StanceTimeBalance;
use FitParser\Records\Generated\Record\StanceTimePercent;
use FitParser\Records\Generated\Record\StepLength;
use FitParser\Records\Generated\Record\StrokeType;
use FitParser\Records\Generated\Record\Temperature;
use FitParser\Records\Generated\Record\Time128;
use FitParser\Records\Generated\Record\TimeFromCourse;
use FitParser\Records\Generated\Record\Timestamp;
use FitParser\Records\Generated\Record\TimeToSurface;
use FitParser\Records\Generated\Record\TotalCycles;
use FitParser\Records\Generated\Record\TotalHemoglobinConc;
use FitParser\Records\Generated\Record\TotalHemoglobinConcMax;
use FitParser\Records\Generated\Record\TotalHemoglobinConcMin;
use FitParser\Records\Generated\Record\VerticalOscillation;
use FitParser\Records\Generated\Record\VerticalRatio;
use FitParser\Records\Generated\Record\VerticalSpeed;
use FitParser\Records\Generated\Record\VolumeSac;
use FitParser\Records\Generated\Record\Zone;
use FitParser\Records\RecordInterface;
use FitParser\Records\UnknownValue;
use FitParser\Records\ValueInterface;

final class Record implements RecordInterface
{
    /** @var ValueInterface[] */
    private array $values;

    public function addValue(ValueInterface $value): void
    {
        if (false === \in_array($value::class, [
            Timestamp::class,
            PositionLat::class,
            PositionLong::class,
            Altitude::class,
            HeartRate::class,
            Cadence::class,
            Distance::class,
            Speed::class,
            Power::class,
            CompressedSpeedDistance::class,
            Grade::class,
            Resistance::class,
            TimeFromCourse::class,
            CycleLength::class,
            Temperature::class,
            Speed1s::class,
            Cycles::class,
            TotalCycles::class,
            CompressedAccumulatedPower::class,
            AccumulatedPower::class,
            LeftRightBalance::class,
            GpsAccuracy::class,
            VerticalSpeed::class,
            Calories::class,
            VerticalOscillation::class,
            StanceTimePercent::class,
            StanceTime::class,
            ActivityType::class,
            LeftTorqueEffectiveness::class,
            RightTorqueEffectiveness::class,
            LeftPedalSmoothness::class,
            RightPedalSmoothness::class,
            CombinedPedalSmoothness::class,
            Time128::class,
            StrokeType::class,
            Zone::class,
            BallSpeed::class,
            Cadence256::class,
            FractionalCadence::class,
            TotalHemoglobinConc::class,
            TotalHemoglobinConcMin::class,
            TotalHemoglobinConcMax::class,
            SaturatedHemoglobinPercent::class,
            SaturatedHemoglobinPercentMin::class,
            SaturatedHemoglobinPercentMax::class,
            DeviceIndex::class,
            LeftPco::class,
            RightPco::class,
            LeftPowerPhase::class,
            LeftPowerPhasePeak::class,
            RightPowerPhase::class,
            RightPowerPhasePeak::class,
            EnhancedSpeed::class,
            EnhancedAltitude::class,
            BatterySoc::class,
            MotorPower::class,
            VerticalRatio::class,
            StanceTimeBalance::class,
            StepLength::class,
            CycleLength16::class,
            AbsolutePressure::class,
            Depth::class,
            NextStopDepth::class,
            NextStopTime::class,
            TimeToSurface::class,
            NdlTime::class,
            CnsLoad::class,
            N2Load::class,
            RespirationRate::class,
            EnhancedRespirationRate::class,
            Grit::class,
            Flow::class,
            CurrentStress::class,
            EbikeTravelRange::class,
            EbikeBatteryLevel::class,
            EbikeAssistMode::class,
            EbikeAssistLevelPercent::class,
            AirTimeRemaining::class,
            PressureSac::class,
            VolumeSac::class,
            Rmv::class,
            AscentRate::class,
            Po2::class,
            CoreTemperature::class,
            UnknownValue::class,
        ], true)) {
            throw new \InvalidArgumentException(
                \sprintf('%s is not an expected value for this record.', $value::class)
            );
        }

        $this->values[] = $value;
    }

    /**
     * @return ValueInterface[]
     */
    public function getValues(): array
    {
        return $this->values;
    }
}
