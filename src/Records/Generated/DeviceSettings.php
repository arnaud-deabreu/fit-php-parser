<?php

/**
 * Do not edit this file: it is auto-generated from the fit-parser-generate-profile command.
 */

declare(strict_types=1);

namespace FitParser\Records\Generated;

use FitParser\Records\Generated\DeviceSettings\ActiveTimeZone;
use FitParser\Records\Generated\DeviceSettings\ActivityTrackerEnabled;
use FitParser\Records\Generated\DeviceSettings\AutoActivityDetect;
use FitParser\Records\Generated\DeviceSettings\AutoSyncFrequency;
use FitParser\Records\Generated\DeviceSettings\AutosyncMinSteps;
use FitParser\Records\Generated\DeviceSettings\AutosyncMinTime;
use FitParser\Records\Generated\DeviceSettings\BacklightMode;
use FitParser\Records\Generated\DeviceSettings\BleAutoUploadEnabled;
use FitParser\Records\Generated\DeviceSettings\ClockTime;
use FitParser\Records\Generated\DeviceSettings\DateMode;
use FitParser\Records\Generated\DeviceSettings\DefaultPage;
use FitParser\Records\Generated\DeviceSettings\DisplayOrientation;
use FitParser\Records\Generated\DeviceSettings\MountingSide;
use FitParser\Records\Generated\DeviceSettings\MoveAlertEnabled;
use FitParser\Records\Generated\DeviceSettings\NumberOfScreens;
use FitParser\Records\Generated\DeviceSettings\PagesEnabled;
use FitParser\Records\Generated\DeviceSettings\SmartNotificationDisplayOrientation;
use FitParser\Records\Generated\DeviceSettings\TapInterface;
use FitParser\Records\Generated\DeviceSettings\TapSensitivity;
use FitParser\Records\Generated\DeviceSettings\TimeMode;
use FitParser\Records\Generated\DeviceSettings\TimeOffset;
use FitParser\Records\Generated\DeviceSettings\TimeZoneOffset;
use FitParser\Records\Generated\DeviceSettings\UtcOffset;
use FitParser\Records\RecordInterface;
use FitParser\Records\UnknownValue;
use FitParser\Records\ValueInterface;

final class DeviceSettings implements RecordInterface
{
    /** @var ValueInterface[] */
    private array $values;

    public function addValue(ValueInterface $value): void
    {
        if (false === \in_array($value::class, [
            ActiveTimeZone::class,
            UtcOffset::class,
            TimeOffset::class,
            TimeMode::class,
            TimeZoneOffset::class,
            BacklightMode::class,
            ActivityTrackerEnabled::class,
            ClockTime::class,
            PagesEnabled::class,
            MoveAlertEnabled::class,
            DateMode::class,
            DisplayOrientation::class,
            MountingSide::class,
            DefaultPage::class,
            AutosyncMinSteps::class,
            AutosyncMinTime::class,
            BleAutoUploadEnabled::class,
            AutoSyncFrequency::class,
            AutoActivityDetect::class,
            NumberOfScreens::class,
            SmartNotificationDisplayOrientation::class,
            TapInterface::class,
            TapSensitivity::class,
            UnknownValue::class,
        ], true)) {
            throw new \InvalidArgumentException(
                \sprintf('%s is not an expected value for this record.', $value::class)
            );
        }

        $this->values[] = $value;
    }

    /**
     * @return ValueInterface[]
     */
    public function getValues(): array
    {
        return $this->values;
    }
}
