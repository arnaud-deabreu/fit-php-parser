<?php

/**
 * Do not edit this file: it is auto-generated from the fit-parser-generate-profile command.
 */

declare(strict_types=1);

namespace FitParser\Records\Generated;

use FitParser\Records\Generated\SegmentLap\ActiveTime;
use FitParser\Records\Generated\SegmentLap\AvgAltitude;
use FitParser\Records\Generated\SegmentLap\AvgCadence;
use FitParser\Records\Generated\SegmentLap\AvgCadencePosition;
use FitParser\Records\Generated\SegmentLap\AvgCombinedPedalSmoothness;
use FitParser\Records\Generated\SegmentLap\AvgFlow;
use FitParser\Records\Generated\SegmentLap\AvgFractionalCadence;
use FitParser\Records\Generated\SegmentLap\AvgGrade;
use FitParser\Records\Generated\SegmentLap\AvgGrit;
use FitParser\Records\Generated\SegmentLap\AvgHeartRate;
use FitParser\Records\Generated\SegmentLap\AvgLeftPco;
use FitParser\Records\Generated\SegmentLap\AvgLeftPedalSmoothness;
use FitParser\Records\Generated\SegmentLap\AvgLeftPowerPhase;
use FitParser\Records\Generated\SegmentLap\AvgLeftPowerPhasePeak;
use FitParser\Records\Generated\SegmentLap\AvgLeftTorqueEffectiveness;
use FitParser\Records\Generated\SegmentLap\AvgNegGrade;
use FitParser\Records\Generated\SegmentLap\AvgNegVerticalSpeed;
use FitParser\Records\Generated\SegmentLap\AvgPosGrade;
use FitParser\Records\Generated\SegmentLap\AvgPosVerticalSpeed;
use FitParser\Records\Generated\SegmentLap\AvgPower;
use FitParser\Records\Generated\SegmentLap\AvgPowerPosition;
use FitParser\Records\Generated\SegmentLap\AvgRightPco;
use FitParser\Records\Generated\SegmentLap\AvgRightPedalSmoothness;
use FitParser\Records\Generated\SegmentLap\AvgRightPowerPhase;
use FitParser\Records\Generated\SegmentLap\AvgRightPowerPhasePeak;
use FitParser\Records\Generated\SegmentLap\AvgRightTorqueEffectiveness;
use FitParser\Records\Generated\SegmentLap\AvgSpeed;
use FitParser\Records\Generated\SegmentLap\AvgTemperature;
use FitParser\Records\Generated\SegmentLap\EndPositionLat;
use FitParser\Records\Generated\SegmentLap\EndPositionLong;
use FitParser\Records\Generated\SegmentLap\EnhancedAvgAltitude;
use FitParser\Records\Generated\SegmentLap\EnhancedMaxAltitude;
use FitParser\Records\Generated\SegmentLap\EnhancedMinAltitude;
use FitParser\Records\Generated\SegmentLap\Event;
use FitParser\Records\Generated\SegmentLap\EventGroup;
use FitParser\Records\Generated\SegmentLap\EventType;
use FitParser\Records\Generated\SegmentLap\FrontGearShiftCount;
use FitParser\Records\Generated\SegmentLap\GpsAccuracy;
use FitParser\Records\Generated\SegmentLap\LeftRightBalance;
use FitParser\Records\Generated\SegmentLap\Manufacturer;
use FitParser\Records\Generated\SegmentLap\MaxAltitude;
use FitParser\Records\Generated\SegmentLap\MaxCadence;
use FitParser\Records\Generated\SegmentLap\MaxCadencePosition;
use FitParser\Records\Generated\SegmentLap\MaxFractionalCadence;
use FitParser\Records\Generated\SegmentLap\MaxHeartRate;
use FitParser\Records\Generated\SegmentLap\MaxNegGrade;
use FitParser\Records\Generated\SegmentLap\MaxNegVerticalSpeed;
use FitParser\Records\Generated\SegmentLap\MaxPosGrade;
use FitParser\Records\Generated\SegmentLap\MaxPosVerticalSpeed;
use FitParser\Records\Generated\SegmentLap\MaxPower;
use FitParser\Records\Generated\SegmentLap\MaxPowerPosition;
use FitParser\Records\Generated\SegmentLap\MaxSpeed;
use FitParser\Records\Generated\SegmentLap\MaxTemperature;
use FitParser\Records\Generated\SegmentLap\MessageIndex;
use FitParser\Records\Generated\SegmentLap\MinAltitude;
use FitParser\Records\Generated\SegmentLap\MinHeartRate;
use FitParser\Records\Generated\SegmentLap\Name;
use FitParser\Records\Generated\SegmentLap\NecLat;
use FitParser\Records\Generated\SegmentLap\NecLong;
use FitParser\Records\Generated\SegmentLap\NormalizedPower;
use FitParser\Records\Generated\SegmentLap\RearGearShiftCount;
use FitParser\Records\Generated\SegmentLap\RepetitionNum;
use FitParser\Records\Generated\SegmentLap\Sport;
use FitParser\Records\Generated\SegmentLap\SportEvent;
use FitParser\Records\Generated\SegmentLap\StandCount;
use FitParser\Records\Generated\SegmentLap\StartPositionLat;
use FitParser\Records\Generated\SegmentLap\StartPositionLong;
use FitParser\Records\Generated\SegmentLap\StartTime;
use FitParser\Records\Generated\SegmentLap\Status;
use FitParser\Records\Generated\SegmentLap\SubSport;
use FitParser\Records\Generated\SegmentLap\SwcLat;
use FitParser\Records\Generated\SegmentLap\SwcLong;
use FitParser\Records\Generated\SegmentLap\TimeInCadenceZone;
use FitParser\Records\Generated\SegmentLap\TimeInHrZone;
use FitParser\Records\Generated\SegmentLap\TimeInPowerZone;
use FitParser\Records\Generated\SegmentLap\TimeInSpeedZone;
use FitParser\Records\Generated\SegmentLap\Timestamp;
use FitParser\Records\Generated\SegmentLap\TimeStanding;
use FitParser\Records\Generated\SegmentLap\TotalAscent;
use FitParser\Records\Generated\SegmentLap\TotalCalories;
use FitParser\Records\Generated\SegmentLap\TotalCycles;
use FitParser\Records\Generated\SegmentLap\TotalDescent;
use FitParser\Records\Generated\SegmentLap\TotalDistance;
use FitParser\Records\Generated\SegmentLap\TotalElapsedTime;
use FitParser\Records\Generated\SegmentLap\TotalFatCalories;
use FitParser\Records\Generated\SegmentLap\TotalFlow;
use FitParser\Records\Generated\SegmentLap\TotalFractionalAscent;
use FitParser\Records\Generated\SegmentLap\TotalFractionalCycles;
use FitParser\Records\Generated\SegmentLap\TotalFractionalDescent;
use FitParser\Records\Generated\SegmentLap\TotalGrit;
use FitParser\Records\Generated\SegmentLap\TotalMovingTime;
use FitParser\Records\Generated\SegmentLap\TotalTimerTime;
use FitParser\Records\Generated\SegmentLap\TotalWork;
use FitParser\Records\Generated\SegmentLap\Uuid;
use FitParser\Records\Generated\SegmentLap\WktStepIndex;
use FitParser\Records\RecordInterface;
use FitParser\Records\UnknownValue;
use FitParser\Records\ValueInterface;

final class SegmentLap implements RecordInterface
{
    /** @var ValueInterface[] */
    private array $values;

    public function addValue(ValueInterface $value): void
    {
        if (false === \in_array($value::class, [
            MessageIndex::class,
            Timestamp::class,
            Event::class,
            EventType::class,
            StartTime::class,
            StartPositionLat::class,
            StartPositionLong::class,
            EndPositionLat::class,
            EndPositionLong::class,
            TotalElapsedTime::class,
            TotalTimerTime::class,
            TotalDistance::class,
            TotalCycles::class,
            TotalCalories::class,
            TotalFatCalories::class,
            AvgSpeed::class,
            MaxSpeed::class,
            AvgHeartRate::class,
            MaxHeartRate::class,
            AvgCadence::class,
            MaxCadence::class,
            AvgPower::class,
            MaxPower::class,
            TotalAscent::class,
            TotalDescent::class,
            Sport::class,
            EventGroup::class,
            NecLat::class,
            NecLong::class,
            SwcLat::class,
            SwcLong::class,
            Name::class,
            NormalizedPower::class,
            LeftRightBalance::class,
            SubSport::class,
            TotalWork::class,
            AvgAltitude::class,
            MaxAltitude::class,
            GpsAccuracy::class,
            AvgGrade::class,
            AvgPosGrade::class,
            AvgNegGrade::class,
            MaxPosGrade::class,
            MaxNegGrade::class,
            AvgTemperature::class,
            MaxTemperature::class,
            TotalMovingTime::class,
            AvgPosVerticalSpeed::class,
            AvgNegVerticalSpeed::class,
            MaxPosVerticalSpeed::class,
            MaxNegVerticalSpeed::class,
            TimeInHrZone::class,
            TimeInSpeedZone::class,
            TimeInCadenceZone::class,
            TimeInPowerZone::class,
            RepetitionNum::class,
            MinAltitude::class,
            MinHeartRate::class,
            ActiveTime::class,
            WktStepIndex::class,
            SportEvent::class,
            AvgLeftTorqueEffectiveness::class,
            AvgRightTorqueEffectiveness::class,
            AvgLeftPedalSmoothness::class,
            AvgRightPedalSmoothness::class,
            AvgCombinedPedalSmoothness::class,
            Status::class,
            Uuid::class,
            AvgFractionalCadence::class,
            MaxFractionalCadence::class,
            TotalFractionalCycles::class,
            FrontGearShiftCount::class,
            RearGearShiftCount::class,
            TimeStanding::class,
            StandCount::class,
            AvgLeftPco::class,
            AvgRightPco::class,
            AvgLeftPowerPhase::class,
            AvgLeftPowerPhasePeak::class,
            AvgRightPowerPhase::class,
            AvgRightPowerPhasePeak::class,
            AvgPowerPosition::class,
            MaxPowerPosition::class,
            AvgCadencePosition::class,
            MaxCadencePosition::class,
            Manufacturer::class,
            TotalGrit::class,
            TotalFlow::class,
            AvgGrit::class,
            AvgFlow::class,
            TotalFractionalAscent::class,
            TotalFractionalDescent::class,
            EnhancedAvgAltitude::class,
            EnhancedMaxAltitude::class,
            EnhancedMinAltitude::class,
            UnknownValue::class,
        ], true)) {
            throw new \InvalidArgumentException(
                \sprintf('%s is not an expected value for this record.', $value::class)
            );
        }

        $this->values[] = $value;
    }

    /**
     * @return ValueInterface[]
     */
    public function getValues(): array
    {
        return $this->values;
    }
}
