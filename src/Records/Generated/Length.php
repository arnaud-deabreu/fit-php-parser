<?php

/**
 * Do not edit this file: it is auto-generated from the fit-parser-generate-profile command.
 */

declare(strict_types=1);

namespace FitParser\Records\Generated;

use FitParser\Records\Generated\Length\AvgRespirationRate;
use FitParser\Records\Generated\Length\AvgSpeed;
use FitParser\Records\Generated\Length\AvgSwimmingCadence;
use FitParser\Records\Generated\Length\EnhancedAvgRespirationRate;
use FitParser\Records\Generated\Length\EnhancedMaxRespirationRate;
use FitParser\Records\Generated\Length\Event;
use FitParser\Records\Generated\Length\EventGroup;
use FitParser\Records\Generated\Length\EventType;
use FitParser\Records\Generated\Length\LengthType;
use FitParser\Records\Generated\Length\MaxRespirationRate;
use FitParser\Records\Generated\Length\MessageIndex;
use FitParser\Records\Generated\Length\OpponentScore;
use FitParser\Records\Generated\Length\PlayerScore;
use FitParser\Records\Generated\Length\StartTime;
use FitParser\Records\Generated\Length\StrokeCount;
use FitParser\Records\Generated\Length\SwimStroke;
use FitParser\Records\Generated\Length\Timestamp;
use FitParser\Records\Generated\Length\TotalCalories;
use FitParser\Records\Generated\Length\TotalElapsedTime;
use FitParser\Records\Generated\Length\TotalStrokes;
use FitParser\Records\Generated\Length\TotalTimerTime;
use FitParser\Records\Generated\Length\ZoneCount;
use FitParser\Records\RecordInterface;
use FitParser\Records\UnknownValue;
use FitParser\Records\ValueInterface;

final class Length implements RecordInterface
{
    /** @var ValueInterface[] */
    private array $values;

    public function addValue(ValueInterface $value): void
    {
        if (false === \in_array($value::class, [
            MessageIndex::class,
            Timestamp::class,
            Event::class,
            EventType::class,
            StartTime::class,
            TotalElapsedTime::class,
            TotalTimerTime::class,
            TotalStrokes::class,
            AvgSpeed::class,
            SwimStroke::class,
            AvgSwimmingCadence::class,
            EventGroup::class,
            TotalCalories::class,
            LengthType::class,
            PlayerScore::class,
            OpponentScore::class,
            StrokeCount::class,
            ZoneCount::class,
            EnhancedAvgRespirationRate::class,
            EnhancedMaxRespirationRate::class,
            AvgRespirationRate::class,
            MaxRespirationRate::class,
            UnknownValue::class,
        ], true)) {
            throw new \InvalidArgumentException(
                \sprintf('%s is not an expected value for this record.', $value::class)
            );
        }

        $this->values[] = $value;
    }

    /**
     * @return ValueInterface[]
     */
    public function getValues(): array
    {
        return $this->values;
    }
}
