<?php

/**
 * Do not edit this file: it is auto-generated from the fit-parser-generate-profile command.
 */

declare(strict_types=1);

namespace FitParser\Records\Generated;

use FitParser\Records\Generated\Monitoring\ActiveCalories;
use FitParser\Records\Generated\Monitoring\ActiveTime;
use FitParser\Records\Generated\Monitoring\ActiveTime16;
use FitParser\Records\Generated\Monitoring\ActivityLevel;
use FitParser\Records\Generated\Monitoring\ActivitySubtype;
use FitParser\Records\Generated\Monitoring\ActivityTime;
use FitParser\Records\Generated\Monitoring\ActivityType;
use FitParser\Records\Generated\Monitoring\Ascent;
use FitParser\Records\Generated\Monitoring\Calories;
use FitParser\Records\Generated\Monitoring\CurrentActivityTypeIntensity;
use FitParser\Records\Generated\Monitoring\Cycles;
use FitParser\Records\Generated\Monitoring\Cycles16;
use FitParser\Records\Generated\Monitoring\Descent;
use FitParser\Records\Generated\Monitoring\DeviceIndex;
use FitParser\Records\Generated\Monitoring\Distance;
use FitParser\Records\Generated\Monitoring\Distance16;
use FitParser\Records\Generated\Monitoring\Duration;
use FitParser\Records\Generated\Monitoring\DurationMin;
use FitParser\Records\Generated\Monitoring\HeartRate;
use FitParser\Records\Generated\Monitoring\Intensity;
use FitParser\Records\Generated\Monitoring\LocalTimestamp;
use FitParser\Records\Generated\Monitoring\ModerateActivityMinutes;
use FitParser\Records\Generated\Monitoring\Temperature;
use FitParser\Records\Generated\Monitoring\TemperatureMax;
use FitParser\Records\Generated\Monitoring\TemperatureMin;
use FitParser\Records\Generated\Monitoring\Timestamp;
use FitParser\Records\Generated\Monitoring\Timestamp16;
use FitParser\Records\Generated\Monitoring\TimestampMin8;
use FitParser\Records\Generated\Monitoring\VigorousActivityMinutes;
use FitParser\Records\RecordInterface;
use FitParser\Records\UnknownValue;
use FitParser\Records\ValueInterface;

final class Monitoring implements RecordInterface
{
    /** @var ValueInterface[] */
    private array $values;

    public function addValue(ValueInterface $value): void
    {
        if (false === \in_array($value::class, [
            Timestamp::class,
            DeviceIndex::class,
            Calories::class,
            Distance::class,
            Cycles::class,
            ActiveTime::class,
            ActivityType::class,
            ActivitySubtype::class,
            ActivityLevel::class,
            Distance16::class,
            Cycles16::class,
            ActiveTime16::class,
            LocalTimestamp::class,
            Temperature::class,
            TemperatureMin::class,
            TemperatureMax::class,
            ActivityTime::class,
            ActiveCalories::class,
            CurrentActivityTypeIntensity::class,
            TimestampMin8::class,
            Timestamp16::class,
            HeartRate::class,
            Intensity::class,
            DurationMin::class,
            Duration::class,
            Ascent::class,
            Descent::class,
            ModerateActivityMinutes::class,
            VigorousActivityMinutes::class,
            UnknownValue::class,
        ], true)) {
            throw new \InvalidArgumentException(
                \sprintf('%s is not an expected value for this record.', $value::class)
            );
        }

        $this->values[] = $value;
    }

    /**
     * @return ValueInterface[]
     */
    public function getValues(): array
    {
        return $this->values;
    }
}
