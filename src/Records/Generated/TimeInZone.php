<?php

/**
 * Do not edit this file: it is auto-generated from the fit-parser-generate-profile command.
 */

declare(strict_types=1);

namespace FitParser\Records\Generated;

use FitParser\Records\Generated\TimeInZone\CadenceZoneHighBondary;
use FitParser\Records\Generated\TimeInZone\FunctionalThresholdPower;
use FitParser\Records\Generated\TimeInZone\HrCalcType;
use FitParser\Records\Generated\TimeInZone\HrZoneHighBoundary;
use FitParser\Records\Generated\TimeInZone\MaxHeartRate;
use FitParser\Records\Generated\TimeInZone\PowerZoneHighBoundary;
use FitParser\Records\Generated\TimeInZone\PwrCalcType;
use FitParser\Records\Generated\TimeInZone\ReferenceIndex;
use FitParser\Records\Generated\TimeInZone\ReferenceMesg;
use FitParser\Records\Generated\TimeInZone\RestingHeartRate;
use FitParser\Records\Generated\TimeInZone\SpeedZoneHighBoundary;
use FitParser\Records\Generated\TimeInZone\ThresholdHeartRate;
use FitParser\Records\Generated\TimeInZone\TimeInCadenceZone;
use FitParser\Records\Generated\TimeInZone\TimeInHrZone;
use FitParser\Records\Generated\TimeInZone\TimeInPowerZone;
use FitParser\Records\Generated\TimeInZone\TimeInSpeedZone;
use FitParser\Records\Generated\TimeInZone\Timestamp;
use FitParser\Records\RecordInterface;
use FitParser\Records\UnknownValue;
use FitParser\Records\ValueInterface;

final class TimeInZone implements RecordInterface
{
    /** @var ValueInterface[] */
    private array $values;

    public function addValue(ValueInterface $value): void
    {
        if (false === \in_array($value::class, [
            Timestamp::class,
            ReferenceMesg::class,
            ReferenceIndex::class,
            TimeInHrZone::class,
            TimeInSpeedZone::class,
            TimeInCadenceZone::class,
            TimeInPowerZone::class,
            HrZoneHighBoundary::class,
            SpeedZoneHighBoundary::class,
            CadenceZoneHighBondary::class,
            PowerZoneHighBoundary::class,
            HrCalcType::class,
            MaxHeartRate::class,
            RestingHeartRate::class,
            ThresholdHeartRate::class,
            PwrCalcType::class,
            FunctionalThresholdPower::class,
            UnknownValue::class,
        ], true)) {
            throw new \InvalidArgumentException(
                \sprintf('%s is not an expected value for this record.', $value::class)
            );
        }

        $this->values[] = $value;
    }

    /**
     * @return ValueInterface[]
     */
    public function getValues(): array
    {
        return $this->values;
    }
}
