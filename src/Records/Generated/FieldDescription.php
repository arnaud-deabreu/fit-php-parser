<?php

/**
 * Do not edit this file: it is auto-generated from the fit-parser-generate-profile command.
 */

declare(strict_types=1);

namespace FitParser\Records\Generated;

use FitParser\Records\Generated\FieldDescription\Accumulate;
use FitParser\Records\Generated\FieldDescription\Bits;
use FitParser\Records\Generated\FieldDescription\Components;
use FitParser\Records\Generated\FieldDescription\DeveloperDataIndex;
use FitParser\Records\Generated\FieldDescription\FieldArray;
use FitParser\Records\Generated\FieldDescription\FieldDefinitionNumber;
use FitParser\Records\Generated\FieldDescription\FieldName;
use FitParser\Records\Generated\FieldDescription\FitBaseTypeId;
use FitParser\Records\Generated\FieldDescription\FitBaseUnitId;
use FitParser\Records\Generated\FieldDescription\NativeFieldNum;
use FitParser\Records\Generated\FieldDescription\NativeMesgNum;
use FitParser\Records\Generated\FieldDescription\Offset;
use FitParser\Records\Generated\FieldDescription\Scale;
use FitParser\Records\Generated\FieldDescription\Units;
use FitParser\Records\RecordInterface;
use FitParser\Records\UnknownValue;
use FitParser\Records\ValueInterface;

final class FieldDescription implements RecordInterface
{
    /** @var ValueInterface[] */
    private array $values;

    public function addValue(ValueInterface $value): void
    {
        if (false === \in_array($value::class, [
            DeveloperDataIndex::class,
            FieldDefinitionNumber::class,
            FitBaseTypeId::class,
            FieldName::class,
            FieldArray::class,
            Components::class,
            Scale::class,
            Offset::class,
            Units::class,
            Bits::class,
            Accumulate::class,
            FitBaseUnitId::class,
            NativeMesgNum::class,
            NativeFieldNum::class,
            UnknownValue::class,
        ], true)) {
            throw new \InvalidArgumentException(
                \sprintf('%s is not an expected value for this record.', $value::class)
            );
        }

        $this->values[] = $value;
    }

    /**
     * @return ValueInterface[]
     */
    public function getValues(): array
    {
        return $this->values;
    }
}
