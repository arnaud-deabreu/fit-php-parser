<?php

/**
 * Do not edit this file: it is auto-generated from the fit-parser-generate-profile command.
 */

declare(strict_types=1);

namespace FitParser\Records\Generated;

use FitParser\Records\Generated\DiveSettings\ApneaCountdownEnabled;
use FitParser\Records\Generated\DiveSettings\ApneaCountdownTime;
use FitParser\Records\Generated\DiveSettings\BacklightBrightness;
use FitParser\Records\Generated\DiveSettings\BacklightMode;
use FitParser\Records\Generated\DiveSettings\BacklightTimeout;
use FitParser\Records\Generated\DiveSettings\BottomDepth;
use FitParser\Records\Generated\DiveSettings\BottomTime;
use FitParser\Records\Generated\DiveSettings\CcrHighSetpoint;
use FitParser\Records\Generated\DiveSettings\CcrHighSetpointDepth;
use FitParser\Records\Generated\DiveSettings\CcrHighSetpointSwitchMode;
use FitParser\Records\Generated\DiveSettings\CcrLowSetpoint;
use FitParser\Records\Generated\DiveSettings\CcrLowSetpointDepth;
use FitParser\Records\Generated\DiveSettings\CcrLowSetpointSwitchMode;
use FitParser\Records\Generated\DiveSettings\DiveSounds;
use FitParser\Records\Generated\DiveSettings\GasConsumptionDisplay;
use FitParser\Records\Generated\DiveSettings\GfHigh;
use FitParser\Records\Generated\DiveSettings\GfLow;
use FitParser\Records\Generated\DiveSettings\HeartRateSource;
use FitParser\Records\Generated\DiveSettings\HeartRateSourceType;
use FitParser\Records\Generated\DiveSettings\LastStopMultiple;
use FitParser\Records\Generated\DiveSettings\Model;
use FitParser\Records\Generated\DiveSettings\Name;
use FitParser\Records\Generated\DiveSettings\NoFlyTimeMode;
use FitParser\Records\Generated\DiveSettings\Po2Critical;
use FitParser\Records\Generated\DiveSettings\Po2Deco;
use FitParser\Records\Generated\DiveSettings\Po2Warn;
use FitParser\Records\Generated\DiveSettings\RepeatDiveInterval;
use FitParser\Records\Generated\DiveSettings\SafetyStopEnabled;
use FitParser\Records\Generated\DiveSettings\SafetyStopTime;
use FitParser\Records\Generated\DiveSettings\TravelGas;
use FitParser\Records\Generated\DiveSettings\UpKeyEnabled;
use FitParser\Records\Generated\DiveSettings\WaterDensity;
use FitParser\Records\Generated\DiveSettings\WaterType;
use FitParser\Records\RecordInterface;
use FitParser\Records\UnknownValue;
use FitParser\Records\ValueInterface;

final class DiveSettings implements RecordInterface
{
    /** @var ValueInterface[] */
    private array $values;

    public function addValue(ValueInterface $value): void
    {
        if (false === \in_array($value::class, [
            Name::class,
            Model::class,
            GfLow::class,
            GfHigh::class,
            WaterType::class,
            WaterDensity::class,
            Po2Warn::class,
            Po2Critical::class,
            Po2Deco::class,
            SafetyStopEnabled::class,
            BottomDepth::class,
            BottomTime::class,
            ApneaCountdownEnabled::class,
            ApneaCountdownTime::class,
            BacklightMode::class,
            BacklightBrightness::class,
            BacklightTimeout::class,
            RepeatDiveInterval::class,
            SafetyStopTime::class,
            HeartRateSourceType::class,
            HeartRateSource::class,
            TravelGas::class,
            CcrLowSetpointSwitchMode::class,
            CcrLowSetpoint::class,
            CcrLowSetpointDepth::class,
            CcrHighSetpointSwitchMode::class,
            CcrHighSetpoint::class,
            CcrHighSetpointDepth::class,
            GasConsumptionDisplay::class,
            UpKeyEnabled::class,
            DiveSounds::class,
            LastStopMultiple::class,
            NoFlyTimeMode::class,
            UnknownValue::class,
        ], true)) {
            throw new \InvalidArgumentException(
                \sprintf('%s is not an expected value for this record.', $value::class)
            );
        }

        $this->values[] = $value;
    }

    /**
     * @return ValueInterface[]
     */
    public function getValues(): array
    {
        return $this->values;
    }
}
