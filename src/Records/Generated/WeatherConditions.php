<?php

/**
 * Do not edit this file: it is auto-generated from the fit-parser-generate-profile command.
 */

declare(strict_types=1);

namespace FitParser\Records\Generated;

use FitParser\Records\Generated\WeatherConditions\Condition;
use FitParser\Records\Generated\WeatherConditions\DayOfWeek;
use FitParser\Records\Generated\WeatherConditions\HighTemperature;
use FitParser\Records\Generated\WeatherConditions\Location;
use FitParser\Records\Generated\WeatherConditions\LowTemperature;
use FitParser\Records\Generated\WeatherConditions\ObservedAtTime;
use FitParser\Records\Generated\WeatherConditions\ObservedLocationLat;
use FitParser\Records\Generated\WeatherConditions\ObservedLocationLong;
use FitParser\Records\Generated\WeatherConditions\PrecipitationProbability;
use FitParser\Records\Generated\WeatherConditions\RelativeHumidity;
use FitParser\Records\Generated\WeatherConditions\Temperature;
use FitParser\Records\Generated\WeatherConditions\TemperatureFeelsLike;
use FitParser\Records\Generated\WeatherConditions\Timestamp;
use FitParser\Records\Generated\WeatherConditions\WeatherReport;
use FitParser\Records\Generated\WeatherConditions\WindDirection;
use FitParser\Records\Generated\WeatherConditions\WindSpeed;
use FitParser\Records\RecordInterface;
use FitParser\Records\UnknownValue;
use FitParser\Records\ValueInterface;

final class WeatherConditions implements RecordInterface
{
    /** @var ValueInterface[] */
    private array $values;

    public function addValue(ValueInterface $value): void
    {
        if (false === \in_array($value::class, [
            Timestamp::class,
            WeatherReport::class,
            Temperature::class,
            Condition::class,
            WindDirection::class,
            WindSpeed::class,
            PrecipitationProbability::class,
            TemperatureFeelsLike::class,
            RelativeHumidity::class,
            Location::class,
            ObservedAtTime::class,
            ObservedLocationLat::class,
            ObservedLocationLong::class,
            DayOfWeek::class,
            HighTemperature::class,
            LowTemperature::class,
            UnknownValue::class,
        ], true)) {
            throw new \InvalidArgumentException(
                \sprintf('%s is not an expected value for this record.', $value::class)
            );
        }

        $this->values[] = $value;
    }

    /**
     * @return ValueInterface[]
     */
    public function getValues(): array
    {
        return $this->values;
    }
}
