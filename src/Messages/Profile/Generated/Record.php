<?php

/**
 * Do not edit this file: it is auto-generated from the fit-parser-generate-profile command.
 */

declare(strict_types=1);

namespace FitParser\Messages\Profile\Generated;

use FitParser\Messages\Profile\FieldInterface;
use FitParser\Messages\Profile\Generated\Record\AbsolutePressure;
use FitParser\Messages\Profile\Generated\Record\AccumulatedPower;
use FitParser\Messages\Profile\Generated\Record\ActivityType;
use FitParser\Messages\Profile\Generated\Record\AirTimeRemaining;
use FitParser\Messages\Profile\Generated\Record\Altitude;
use FitParser\Messages\Profile\Generated\Record\AscentRate;
use FitParser\Messages\Profile\Generated\Record\BallSpeed;
use FitParser\Messages\Profile\Generated\Record\BatterySoc;
use FitParser\Messages\Profile\Generated\Record\Cadence;
use FitParser\Messages\Profile\Generated\Record\Cadence256;
use FitParser\Messages\Profile\Generated\Record\Calories;
use FitParser\Messages\Profile\Generated\Record\CnsLoad;
use FitParser\Messages\Profile\Generated\Record\CombinedPedalSmoothness;
use FitParser\Messages\Profile\Generated\Record\CompressedAccumulatedPower;
use FitParser\Messages\Profile\Generated\Record\CompressedSpeedDistance;
use FitParser\Messages\Profile\Generated\Record\CoreTemperature;
use FitParser\Messages\Profile\Generated\Record\CurrentStress;
use FitParser\Messages\Profile\Generated\Record\CycleLength;
use FitParser\Messages\Profile\Generated\Record\CycleLength16;
use FitParser\Messages\Profile\Generated\Record\Cycles;
use FitParser\Messages\Profile\Generated\Record\Depth;
use FitParser\Messages\Profile\Generated\Record\DeviceIndex;
use FitParser\Messages\Profile\Generated\Record\Distance;
use FitParser\Messages\Profile\Generated\Record\EbikeAssistLevelPercent;
use FitParser\Messages\Profile\Generated\Record\EbikeAssistMode;
use FitParser\Messages\Profile\Generated\Record\EbikeBatteryLevel;
use FitParser\Messages\Profile\Generated\Record\EbikeTravelRange;
use FitParser\Messages\Profile\Generated\Record\EnhancedAltitude;
use FitParser\Messages\Profile\Generated\Record\EnhancedRespirationRate;
use FitParser\Messages\Profile\Generated\Record\EnhancedSpeed;
use FitParser\Messages\Profile\Generated\Record\Flow;
use FitParser\Messages\Profile\Generated\Record\FractionalCadence;
use FitParser\Messages\Profile\Generated\Record\GpsAccuracy;
use FitParser\Messages\Profile\Generated\Record\Grade;
use FitParser\Messages\Profile\Generated\Record\Grit;
use FitParser\Messages\Profile\Generated\Record\HeartRate;
use FitParser\Messages\Profile\Generated\Record\LeftPco;
use FitParser\Messages\Profile\Generated\Record\LeftPedalSmoothness;
use FitParser\Messages\Profile\Generated\Record\LeftPowerPhase;
use FitParser\Messages\Profile\Generated\Record\LeftPowerPhasePeak;
use FitParser\Messages\Profile\Generated\Record\LeftRightBalance;
use FitParser\Messages\Profile\Generated\Record\LeftTorqueEffectiveness;
use FitParser\Messages\Profile\Generated\Record\MotorPower;
use FitParser\Messages\Profile\Generated\Record\N2Load;
use FitParser\Messages\Profile\Generated\Record\NdlTime;
use FitParser\Messages\Profile\Generated\Record\NextStopDepth;
use FitParser\Messages\Profile\Generated\Record\NextStopTime;
use FitParser\Messages\Profile\Generated\Record\Po2;
use FitParser\Messages\Profile\Generated\Record\PositionLat;
use FitParser\Messages\Profile\Generated\Record\PositionLong;
use FitParser\Messages\Profile\Generated\Record\Power;
use FitParser\Messages\Profile\Generated\Record\PressureSac;
use FitParser\Messages\Profile\Generated\Record\Resistance;
use FitParser\Messages\Profile\Generated\Record\RespirationRate;
use FitParser\Messages\Profile\Generated\Record\RightPco;
use FitParser\Messages\Profile\Generated\Record\RightPedalSmoothness;
use FitParser\Messages\Profile\Generated\Record\RightPowerPhase;
use FitParser\Messages\Profile\Generated\Record\RightPowerPhasePeak;
use FitParser\Messages\Profile\Generated\Record\RightTorqueEffectiveness;
use FitParser\Messages\Profile\Generated\Record\Rmv;
use FitParser\Messages\Profile\Generated\Record\SaturatedHemoglobinPercent;
use FitParser\Messages\Profile\Generated\Record\SaturatedHemoglobinPercentMax;
use FitParser\Messages\Profile\Generated\Record\SaturatedHemoglobinPercentMin;
use FitParser\Messages\Profile\Generated\Record\Speed;
use FitParser\Messages\Profile\Generated\Record\Speed1s;
use FitParser\Messages\Profile\Generated\Record\StanceTime;
use FitParser\Messages\Profile\Generated\Record\StanceTimeBalance;
use FitParser\Messages\Profile\Generated\Record\StanceTimePercent;
use FitParser\Messages\Profile\Generated\Record\StepLength;
use FitParser\Messages\Profile\Generated\Record\StrokeType;
use FitParser\Messages\Profile\Generated\Record\Temperature;
use FitParser\Messages\Profile\Generated\Record\Time128;
use FitParser\Messages\Profile\Generated\Record\TimeFromCourse;
use FitParser\Messages\Profile\Generated\Record\TimeToSurface;
use FitParser\Messages\Profile\Generated\Record\Timestamp;
use FitParser\Messages\Profile\Generated\Record\TotalCycles;
use FitParser\Messages\Profile\Generated\Record\TotalHemoglobinConc;
use FitParser\Messages\Profile\Generated\Record\TotalHemoglobinConcMax;
use FitParser\Messages\Profile\Generated\Record\TotalHemoglobinConcMin;
use FitParser\Messages\Profile\Generated\Record\VerticalOscillation;
use FitParser\Messages\Profile\Generated\Record\VerticalRatio;
use FitParser\Messages\Profile\Generated\Record\VerticalSpeed;
use FitParser\Messages\Profile\Generated\Record\VolumeSac;
use FitParser\Messages\Profile\Generated\Record\Zone;
use FitParser\Messages\Profile\MessageInterface;

final readonly class Record implements MessageInterface
{
    private function __construct(
        public Timestamp $timestamp,
        public PositionLat $positionLat,
        public PositionLong $positionLong,
        public Altitude $altitude,
        public HeartRate $heartRate,
        public Cadence $cadence,
        public Distance $distance,
        public Speed $speed,
        public Power $power,
        public CompressedSpeedDistance $compressedSpeedDistance,
        public Grade $grade,
        public Resistance $resistance,
        public TimeFromCourse $timeFromCourse,
        public CycleLength $cycleLength,
        public Temperature $temperature,
        public Speed1s $speed1s,
        public Cycles $cycles,
        public TotalCycles $totalCycles,
        public CompressedAccumulatedPower $compressedAccumulatedPower,
        public AccumulatedPower $accumulatedPower,
        public LeftRightBalance $leftRightBalance,
        public GpsAccuracy $gpsAccuracy,
        public VerticalSpeed $verticalSpeed,
        public Calories $calories,
        public VerticalOscillation $verticalOscillation,
        public StanceTimePercent $stanceTimePercent,
        public StanceTime $stanceTime,
        public ActivityType $activityType,
        public LeftTorqueEffectiveness $leftTorqueEffectiveness,
        public RightTorqueEffectiveness $rightTorqueEffectiveness,
        public LeftPedalSmoothness $leftPedalSmoothness,
        public RightPedalSmoothness $rightPedalSmoothness,
        public CombinedPedalSmoothness $combinedPedalSmoothness,
        public Time128 $time128,
        public StrokeType $strokeType,
        public Zone $zone,
        public BallSpeed $ballSpeed,
        public Cadence256 $cadence256,
        public FractionalCadence $fractionalCadence,
        public TotalHemoglobinConc $totalHemoglobinConc,
        public TotalHemoglobinConcMin $totalHemoglobinConcMin,
        public TotalHemoglobinConcMax $totalHemoglobinConcMax,
        public SaturatedHemoglobinPercent $saturatedHemoglobinPercent,
        public SaturatedHemoglobinPercentMin $saturatedHemoglobinPercentMin,
        public SaturatedHemoglobinPercentMax $saturatedHemoglobinPercentMax,
        public DeviceIndex $deviceIndex,
        public LeftPco $leftPco,
        public RightPco $rightPco,
        public LeftPowerPhase $leftPowerPhase,
        public LeftPowerPhasePeak $leftPowerPhasePeak,
        public RightPowerPhase $rightPowerPhase,
        public RightPowerPhasePeak $rightPowerPhasePeak,
        public EnhancedSpeed $enhancedSpeed,
        public EnhancedAltitude $enhancedAltitude,
        public BatterySoc $batterySoc,
        public MotorPower $motorPower,
        public VerticalRatio $verticalRatio,
        public StanceTimeBalance $stanceTimeBalance,
        public StepLength $stepLength,
        public CycleLength16 $cycleLength16,
        public AbsolutePressure $absolutePressure,
        public Depth $depth,
        public NextStopDepth $nextStopDepth,
        public NextStopTime $nextStopTime,
        public TimeToSurface $timeToSurface,
        public NdlTime $ndlTime,
        public CnsLoad $cnsLoad,
        public N2Load $n2Load,
        public RespirationRate $respirationRate,
        public EnhancedRespirationRate $enhancedRespirationRate,
        public Grit $grit,
        public Flow $flow,
        public CurrentStress $currentStress,
        public EbikeTravelRange $ebikeTravelRange,
        public EbikeBatteryLevel $ebikeBatteryLevel,
        public EbikeAssistMode $ebikeAssistMode,
        public EbikeAssistLevelPercent $ebikeAssistLevelPercent,
        public AirTimeRemaining $airTimeRemaining,
        public PressureSac $pressureSac,
        public VolumeSac $volumeSac,
        public Rmv $rmv,
        public AscentRate $ascentRate,
        public Po2 $po2,
        public CoreTemperature $coreTemperature,
    ) {
    }

    public static function create(): self
    {
        return new self(
            new Timestamp(),
            new PositionLat(),
            new PositionLong(),
            new Altitude(),
            new HeartRate(),
            new Cadence(),
            new Distance(),
            new Speed(),
            new Power(),
            new CompressedSpeedDistance(),
            new Grade(),
            new Resistance(),
            new TimeFromCourse(),
            new CycleLength(),
            new Temperature(),
            new Speed1s(),
            new Cycles(),
            new TotalCycles(),
            new CompressedAccumulatedPower(),
            new AccumulatedPower(),
            new LeftRightBalance(),
            new GpsAccuracy(),
            new VerticalSpeed(),
            new Calories(),
            new VerticalOscillation(),
            new StanceTimePercent(),
            new StanceTime(),
            new ActivityType(),
            new LeftTorqueEffectiveness(),
            new RightTorqueEffectiveness(),
            new LeftPedalSmoothness(),
            new RightPedalSmoothness(),
            new CombinedPedalSmoothness(),
            new Time128(),
            new StrokeType(),
            new Zone(),
            new BallSpeed(),
            new Cadence256(),
            new FractionalCadence(),
            new TotalHemoglobinConc(),
            new TotalHemoglobinConcMin(),
            new TotalHemoglobinConcMax(),
            new SaturatedHemoglobinPercent(),
            new SaturatedHemoglobinPercentMin(),
            new SaturatedHemoglobinPercentMax(),
            new DeviceIndex(),
            new LeftPco(),
            new RightPco(),
            new LeftPowerPhase(),
            new LeftPowerPhasePeak(),
            new RightPowerPhase(),
            new RightPowerPhasePeak(),
            new EnhancedSpeed(),
            new EnhancedAltitude(),
            new BatterySoc(),
            new MotorPower(),
            new VerticalRatio(),
            new StanceTimeBalance(),
            new StepLength(),
            new CycleLength16(),
            new AbsolutePressure(),
            new Depth(),
            new NextStopDepth(),
            new NextStopTime(),
            new TimeToSurface(),
            new NdlTime(),
            new CnsLoad(),
            new N2Load(),
            new RespirationRate(),
            new EnhancedRespirationRate(),
            new Grit(),
            new Flow(),
            new CurrentStress(),
            new EbikeTravelRange(),
            new EbikeBatteryLevel(),
            new EbikeAssistMode(),
            new EbikeAssistLevelPercent(),
            new AirTimeRemaining(),
            new PressureSac(),
            new VolumeSac(),
            new Rmv(),
            new AscentRate(),
            new Po2(),
            new CoreTemperature(),
        );
    }

    /**
     * @return FieldInterface[]
     */
    public function getFields(): iterable
    {
        /** @var FieldInterface[] $properties */
        $properties = get_object_vars($this);

        foreach ($properties as $field) {
            yield $field->getDefinitionNumber() => $field;
        }
    }
}
