<?php

/**
 * Do not edit this file: it is auto-generated from the fit-parser-generate-profile command.
 */

declare(strict_types=1);

namespace FitParser\Messages\Profile\Generated;

use FitParser\Messages\Profile\FieldInterface;
use FitParser\Messages\Profile\Generated\DeviceSettings\ActiveTimeZone;
use FitParser\Messages\Profile\Generated\DeviceSettings\ActivityTrackerEnabled;
use FitParser\Messages\Profile\Generated\DeviceSettings\AutoActivityDetect;
use FitParser\Messages\Profile\Generated\DeviceSettings\AutoSyncFrequency;
use FitParser\Messages\Profile\Generated\DeviceSettings\AutosyncMinSteps;
use FitParser\Messages\Profile\Generated\DeviceSettings\AutosyncMinTime;
use FitParser\Messages\Profile\Generated\DeviceSettings\BacklightMode;
use FitParser\Messages\Profile\Generated\DeviceSettings\BleAutoUploadEnabled;
use FitParser\Messages\Profile\Generated\DeviceSettings\ClockTime;
use FitParser\Messages\Profile\Generated\DeviceSettings\DateMode;
use FitParser\Messages\Profile\Generated\DeviceSettings\DefaultPage;
use FitParser\Messages\Profile\Generated\DeviceSettings\DisplayOrientation;
use FitParser\Messages\Profile\Generated\DeviceSettings\MountingSide;
use FitParser\Messages\Profile\Generated\DeviceSettings\MoveAlertEnabled;
use FitParser\Messages\Profile\Generated\DeviceSettings\NumberOfScreens;
use FitParser\Messages\Profile\Generated\DeviceSettings\PagesEnabled;
use FitParser\Messages\Profile\Generated\DeviceSettings\SmartNotificationDisplayOrientation;
use FitParser\Messages\Profile\Generated\DeviceSettings\TapInterface;
use FitParser\Messages\Profile\Generated\DeviceSettings\TapSensitivity;
use FitParser\Messages\Profile\Generated\DeviceSettings\TimeMode;
use FitParser\Messages\Profile\Generated\DeviceSettings\TimeOffset;
use FitParser\Messages\Profile\Generated\DeviceSettings\TimeZoneOffset;
use FitParser\Messages\Profile\Generated\DeviceSettings\UtcOffset;
use FitParser\Messages\Profile\MessageInterface;

final readonly class DeviceSettings implements MessageInterface
{
    private function __construct(
        public ActiveTimeZone $activeTimeZone,
        public UtcOffset $utcOffset,
        public TimeOffset $timeOffset,
        public TimeMode $timeMode,
        public TimeZoneOffset $timeZoneOffset,
        public BacklightMode $backlightMode,
        public ActivityTrackerEnabled $activityTrackerEnabled,
        public ClockTime $clockTime,
        public PagesEnabled $pagesEnabled,
        public MoveAlertEnabled $moveAlertEnabled,
        public DateMode $dateMode,
        public DisplayOrientation $displayOrientation,
        public MountingSide $mountingSide,
        public DefaultPage $defaultPage,
        public AutosyncMinSteps $autosyncMinSteps,
        public AutosyncMinTime $autosyncMinTime,
        public BleAutoUploadEnabled $bleAutoUploadEnabled,
        public AutoSyncFrequency $autoSyncFrequency,
        public AutoActivityDetect $autoActivityDetect,
        public NumberOfScreens $numberOfScreens,
        public SmartNotificationDisplayOrientation $smartNotificationDisplayOrientation,
        public TapInterface $tapInterface,
        public TapSensitivity $tapSensitivity,
    ) {}

    public static function create(): self
    {
        return new self(
            new ActiveTimeZone(),
            new UtcOffset(),
            new TimeOffset(),
            new TimeMode(),
            new TimeZoneOffset(),
            new BacklightMode(),
            new ActivityTrackerEnabled(),
            new ClockTime(),
            new PagesEnabled(),
            new MoveAlertEnabled(),
            new DateMode(),
            new DisplayOrientation(),
            new MountingSide(),
            new DefaultPage(),
            new AutosyncMinSteps(),
            new AutosyncMinTime(),
            new BleAutoUploadEnabled(),
            new AutoSyncFrequency(),
            new AutoActivityDetect(),
            new NumberOfScreens(),
            new SmartNotificationDisplayOrientation(),
            new TapInterface(),
            new TapSensitivity(),
        );
    }

    /**
     * @return FieldInterface[]
     */
    public function getFields(): iterable
    {
        /** @var FieldInterface[] $properties */
        $properties = get_object_vars($this);

        foreach ($properties as $field) {
            yield $field->getDefinitionNumber() => $field;
        }
    }
}
