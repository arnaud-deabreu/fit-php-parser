<?php

/**
 * Do not edit this file: it is auto-generated from the fit-parser-generate-profile command.
 */

declare(strict_types=1);

namespace FitParser\Messages\Profile\Generated;

use FitParser\Messages\Profile\FieldInterface;
use FitParser\Messages\Profile\Generated\DeviceInfo\AntDeviceNumber;
use FitParser\Messages\Profile\Generated\DeviceInfo\AntNetwork;
use FitParser\Messages\Profile\Generated\DeviceInfo\AntTransmissionType;
use FitParser\Messages\Profile\Generated\DeviceInfo\BatteryLevel;
use FitParser\Messages\Profile\Generated\DeviceInfo\BatteryStatus;
use FitParser\Messages\Profile\Generated\DeviceInfo\BatteryVoltage;
use FitParser\Messages\Profile\Generated\DeviceInfo\CumOperatingTime;
use FitParser\Messages\Profile\Generated\DeviceInfo\Descriptor;
use FitParser\Messages\Profile\Generated\DeviceInfo\DeviceIndex;
use FitParser\Messages\Profile\Generated\DeviceInfo\DeviceType;
use FitParser\Messages\Profile\Generated\DeviceInfo\HardwareVersion;
use FitParser\Messages\Profile\Generated\DeviceInfo\Manufacturer;
use FitParser\Messages\Profile\Generated\DeviceInfo\Product;
use FitParser\Messages\Profile\Generated\DeviceInfo\ProductName;
use FitParser\Messages\Profile\Generated\DeviceInfo\SensorPosition;
use FitParser\Messages\Profile\Generated\DeviceInfo\SerialNumber;
use FitParser\Messages\Profile\Generated\DeviceInfo\SoftwareVersion;
use FitParser\Messages\Profile\Generated\DeviceInfo\SourceType;
use FitParser\Messages\Profile\Generated\DeviceInfo\Timestamp;
use FitParser\Messages\Profile\MessageInterface;

final readonly class DeviceInfo implements MessageInterface
{
    private function __construct(
        public Timestamp $timestamp,
        public DeviceIndex $deviceIndex,
        public DeviceType $deviceType,
        public Manufacturer $manufacturer,
        public SerialNumber $serialNumber,
        public Product $product,
        public SoftwareVersion $softwareVersion,
        public HardwareVersion $hardwareVersion,
        public CumOperatingTime $cumOperatingTime,
        public BatteryVoltage $batteryVoltage,
        public BatteryStatus $batteryStatus,
        public SensorPosition $sensorPosition,
        public Descriptor $descriptor,
        public AntTransmissionType $antTransmissionType,
        public AntDeviceNumber $antDeviceNumber,
        public AntNetwork $antNetwork,
        public SourceType $sourceType,
        public ProductName $productName,
        public BatteryLevel $batteryLevel,
    ) {}

    public static function create(): self
    {
        return new self(
            new Timestamp(),
            new DeviceIndex(),
            new DeviceType(),
            new Manufacturer(),
            new SerialNumber(),
            new Product(),
            new SoftwareVersion(),
            new HardwareVersion(),
            new CumOperatingTime(),
            new BatteryVoltage(),
            new BatteryStatus(),
            new SensorPosition(),
            new Descriptor(),
            new AntTransmissionType(),
            new AntDeviceNumber(),
            new AntNetwork(),
            new SourceType(),
            new ProductName(),
            new BatteryLevel(),
        );
    }

    /**
     * @return FieldInterface[]
     */
    public function getFields(): iterable
    {
        /** @var FieldInterface[] $properties */
        $properties = get_object_vars($this);

        foreach ($properties as $field) {
            yield $field->getDefinitionNumber() => $field;
        }
    }
}
