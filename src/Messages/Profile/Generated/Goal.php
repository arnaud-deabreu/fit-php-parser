<?php

/**
 * Do not edit this file: it is auto-generated from the fit-parser-generate-profile command.
 */

declare(strict_types=1);

namespace FitParser\Messages\Profile\Generated;

use FitParser\Messages\Profile\FieldInterface;
use FitParser\Messages\Profile\Generated\Goal\Enabled;
use FitParser\Messages\Profile\Generated\Goal\EndDate;
use FitParser\Messages\Profile\Generated\Goal\MessageIndex;
use FitParser\Messages\Profile\Generated\Goal\Recurrence;
use FitParser\Messages\Profile\Generated\Goal\RecurrenceValue;
use FitParser\Messages\Profile\Generated\Goal\Repeat;
use FitParser\Messages\Profile\Generated\Goal\Source;
use FitParser\Messages\Profile\Generated\Goal\Sport;
use FitParser\Messages\Profile\Generated\Goal\StartDate;
use FitParser\Messages\Profile\Generated\Goal\SubSport;
use FitParser\Messages\Profile\Generated\Goal\TargetValue;
use FitParser\Messages\Profile\Generated\Goal\Type;
use FitParser\Messages\Profile\Generated\Goal\Value;
use FitParser\Messages\Profile\MessageInterface;

final readonly class Goal implements MessageInterface
{
    private function __construct(
        public MessageIndex $messageIndex,
        public Sport $sport,
        public SubSport $subSport,
        public StartDate $startDate,
        public EndDate $endDate,
        public Type $type,
        public Value $value,
        public Repeat $repeat,
        public TargetValue $targetValue,
        public Recurrence $recurrence,
        public RecurrenceValue $recurrenceValue,
        public Enabled $enabled,
        public Source $source,
    ) {}

    public static function create(): self
    {
        return new self(
            new MessageIndex(),
            new Sport(),
            new SubSport(),
            new StartDate(),
            new EndDate(),
            new Type(),
            new Value(),
            new Repeat(),
            new TargetValue(),
            new Recurrence(),
            new RecurrenceValue(),
            new Enabled(),
            new Source(),
        );
    }

    /**
     * @return FieldInterface[]
     */
    public function getFields(): iterable
    {
        /** @var FieldInterface[] $properties */
        $properties = get_object_vars($this);

        foreach ($properties as $field) {
            yield $field->getDefinitionNumber() => $field;
        }
    }
}
