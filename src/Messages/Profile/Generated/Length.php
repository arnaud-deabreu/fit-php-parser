<?php

/**
 * Do not edit this file: it is auto-generated from the fit-parser-generate-profile command.
 */

declare(strict_types=1);

namespace FitParser\Messages\Profile\Generated;

use FitParser\Messages\Profile\FieldInterface;
use FitParser\Messages\Profile\Generated\Length\AvgRespirationRate;
use FitParser\Messages\Profile\Generated\Length\AvgSpeed;
use FitParser\Messages\Profile\Generated\Length\AvgSwimmingCadence;
use FitParser\Messages\Profile\Generated\Length\EnhancedAvgRespirationRate;
use FitParser\Messages\Profile\Generated\Length\EnhancedMaxRespirationRate;
use FitParser\Messages\Profile\Generated\Length\Event;
use FitParser\Messages\Profile\Generated\Length\EventGroup;
use FitParser\Messages\Profile\Generated\Length\EventType;
use FitParser\Messages\Profile\Generated\Length\LengthType;
use FitParser\Messages\Profile\Generated\Length\MaxRespirationRate;
use FitParser\Messages\Profile\Generated\Length\MessageIndex;
use FitParser\Messages\Profile\Generated\Length\OpponentScore;
use FitParser\Messages\Profile\Generated\Length\PlayerScore;
use FitParser\Messages\Profile\Generated\Length\StartTime;
use FitParser\Messages\Profile\Generated\Length\StrokeCount;
use FitParser\Messages\Profile\Generated\Length\SwimStroke;
use FitParser\Messages\Profile\Generated\Length\Timestamp;
use FitParser\Messages\Profile\Generated\Length\TotalCalories;
use FitParser\Messages\Profile\Generated\Length\TotalElapsedTime;
use FitParser\Messages\Profile\Generated\Length\TotalStrokes;
use FitParser\Messages\Profile\Generated\Length\TotalTimerTime;
use FitParser\Messages\Profile\Generated\Length\ZoneCount;
use FitParser\Messages\Profile\MessageInterface;

final readonly class Length implements MessageInterface
{
    private function __construct(
        public MessageIndex $messageIndex,
        public Timestamp $timestamp,
        public Event $event,
        public EventType $eventType,
        public StartTime $startTime,
        public TotalElapsedTime $totalElapsedTime,
        public TotalTimerTime $totalTimerTime,
        public TotalStrokes $totalStrokes,
        public AvgSpeed $avgSpeed,
        public SwimStroke $swimStroke,
        public AvgSwimmingCadence $avgSwimmingCadence,
        public EventGroup $eventGroup,
        public TotalCalories $totalCalories,
        public LengthType $lengthType,
        public PlayerScore $playerScore,
        public OpponentScore $opponentScore,
        public StrokeCount $strokeCount,
        public ZoneCount $zoneCount,
        public EnhancedAvgRespirationRate $enhancedAvgRespirationRate,
        public EnhancedMaxRespirationRate $enhancedMaxRespirationRate,
        public AvgRespirationRate $avgRespirationRate,
        public MaxRespirationRate $maxRespirationRate,
    ) {}

    public static function create(): self
    {
        return new self(
            new MessageIndex(),
            new Timestamp(),
            new Event(),
            new EventType(),
            new StartTime(),
            new TotalElapsedTime(),
            new TotalTimerTime(),
            new TotalStrokes(),
            new AvgSpeed(),
            new SwimStroke(),
            new AvgSwimmingCadence(),
            new EventGroup(),
            new TotalCalories(),
            new LengthType(),
            new PlayerScore(),
            new OpponentScore(),
            new StrokeCount(),
            new ZoneCount(),
            new EnhancedAvgRespirationRate(),
            new EnhancedMaxRespirationRate(),
            new AvgRespirationRate(),
            new MaxRespirationRate(),
        );
    }

    /**
     * @return FieldInterface[]
     */
    public function getFields(): iterable
    {
        /** @var FieldInterface[] $properties */
        $properties = get_object_vars($this);

        foreach ($properties as $field) {
            yield $field->getDefinitionNumber() => $field;
        }
    }
}
