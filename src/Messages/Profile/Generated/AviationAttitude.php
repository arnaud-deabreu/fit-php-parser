<?php

/**
 * Do not edit this file: it is auto-generated from the fit-parser-generate-profile command.
 */

declare(strict_types=1);

namespace FitParser\Messages\Profile\Generated;

use FitParser\Messages\Profile\FieldInterface;
use FitParser\Messages\Profile\Generated\AviationAttitude\AccelLateral;
use FitParser\Messages\Profile\Generated\AviationAttitude\AccelNormal;
use FitParser\Messages\Profile\Generated\AviationAttitude\AttitudeStageComplete;
use FitParser\Messages\Profile\Generated\AviationAttitude\Pitch;
use FitParser\Messages\Profile\Generated\AviationAttitude\Roll;
use FitParser\Messages\Profile\Generated\AviationAttitude\Stage;
use FitParser\Messages\Profile\Generated\AviationAttitude\SystemTime;
use FitParser\Messages\Profile\Generated\AviationAttitude\Timestamp;
use FitParser\Messages\Profile\Generated\AviationAttitude\TimestampMs;
use FitParser\Messages\Profile\Generated\AviationAttitude\Track;
use FitParser\Messages\Profile\Generated\AviationAttitude\TurnRate;
use FitParser\Messages\Profile\Generated\AviationAttitude\Validity;
use FitParser\Messages\Profile\MessageInterface;

final readonly class AviationAttitude implements MessageInterface
{
    private function __construct(
        public Timestamp $timestamp,
        public TimestampMs $timestampMs,
        public SystemTime $systemTime,
        public Pitch $pitch,
        public Roll $roll,
        public AccelLateral $accelLateral,
        public AccelNormal $accelNormal,
        public TurnRate $turnRate,
        public Stage $stage,
        public AttitudeStageComplete $attitudeStageComplete,
        public Track $track,
        public Validity $validity,
    ) {
    }

    public static function create(): self
    {
        return new self(
            new Timestamp(),
            new TimestampMs(),
            new SystemTime(),
            new Pitch(),
            new Roll(),
            new AccelLateral(),
            new AccelNormal(),
            new TurnRate(),
            new Stage(),
            new AttitudeStageComplete(),
            new Track(),
            new Validity(),
        );
    }

    /**
     * @return FieldInterface[]
     */
    public function getFields(): iterable
    {
        /** @var FieldInterface[] $properties */
        $properties = get_object_vars($this);

        foreach ($properties as $field) {
            yield $field->getDefinitionNumber() => $field;
        }
    }
}
