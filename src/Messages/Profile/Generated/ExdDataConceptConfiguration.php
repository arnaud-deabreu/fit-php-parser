<?php

/**
 * Do not edit this file: it is auto-generated from the fit-parser-generate-profile command.
 */

declare(strict_types=1);

namespace FitParser\Messages\Profile\Generated;

use FitParser\Messages\Profile\FieldInterface;
use FitParser\Messages\Profile\Generated\ExdDataConceptConfiguration\ConceptField;
use FitParser\Messages\Profile\Generated\ExdDataConceptConfiguration\ConceptIndex;
use FitParser\Messages\Profile\Generated\ExdDataConceptConfiguration\ConceptKey;
use FitParser\Messages\Profile\Generated\ExdDataConceptConfiguration\DataPage;
use FitParser\Messages\Profile\Generated\ExdDataConceptConfiguration\DataUnits;
use FitParser\Messages\Profile\Generated\ExdDataConceptConfiguration\Descriptor;
use FitParser\Messages\Profile\Generated\ExdDataConceptConfiguration\FieldId;
use FitParser\Messages\Profile\Generated\ExdDataConceptConfiguration\IsSigned;
use FitParser\Messages\Profile\Generated\ExdDataConceptConfiguration\Qualifier;
use FitParser\Messages\Profile\Generated\ExdDataConceptConfiguration\Scaling;
use FitParser\Messages\Profile\Generated\ExdDataConceptConfiguration\ScreenIndex;
use FitParser\Messages\Profile\MessageInterface;

final readonly class ExdDataConceptConfiguration implements MessageInterface
{
    private function __construct(
        public ScreenIndex $screenIndex,
        public ConceptField $conceptField,
        public FieldId $fieldId,
        public ConceptIndex $conceptIndex,
        public DataPage $dataPage,
        public ConceptKey $conceptKey,
        public Scaling $scaling,
        public DataUnits $dataUnits,
        public Qualifier $qualifier,
        public Descriptor $descriptor,
        public IsSigned $isSigned,
    ) {}

    public static function create(): self
    {
        return new self(
            new ScreenIndex(),
            new ConceptField(),
            new FieldId(),
            new ConceptIndex(),
            new DataPage(),
            new ConceptKey(),
            new Scaling(),
            new DataUnits(),
            new Qualifier(),
            new Descriptor(),
            new IsSigned(),
        );
    }

    /**
     * @return FieldInterface[]
     */
    public function getFields(): iterable
    {
        /** @var FieldInterface[] $properties */
        $properties = get_object_vars($this);

        foreach ($properties as $field) {
            yield $field->getDefinitionNumber() => $field;
        }
    }
}
